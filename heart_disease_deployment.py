# -*- coding: utf-8 -*-
"""Heart-Disease-Deployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NAOdfKXdVYH4ap8wcNPENkky4DAXQK80
"""

#!pip install streamlit
#!pip install joblib

import streamlit as st
import pandas as pd
import joblib

# Load the saved pipeline model (make sure this file exists in the same directory)
model = joblib.load('heart_disease_pipeline.pkl')

# Get feature names expected by the model
expected_features = list(model.feature_names_in_)

st.title("Heart Disease Prediction App")

st.write("Please enter patient details:")

# Create a dict to collect user inputs for each expected feature
input_data = {}

# Define some helper dictionaries for categorical features (customize as needed)
categorical_options = {
    'sex': {0: 'Female', 1: 'Male'},
    'cp': {0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'},
    'fbs': {0: 'FBS < 120', 1: 'FBS > 120'},
    'restecg': {0: 'Normal', 1: 'ST-T Abnormality', 2: 'Left Ventricular Hypertrophy'},
    'exang': {0: 'No', 1: 'Yes'},
    'slope': {0: 'Upsloping', 1: 'Flat', 2: 'Downsloping'},
    'ca': list(range(5)),  # 0 to 4
    'thal': {1: 'Normal', 2: 'Fixed Defect', 3: 'Reversible Defect'},
}

# Input widgets based on feature name
for feature in expected_features:
    if feature in categorical_options:
        options = categorical_options[feature]
        if isinstance(options, dict):
            # show label instead of number, store number
            rev_options = {v: k for k, v in options.items()}
            selection = st.selectbox(f"{feature}", list(options.values()))
            input_data[feature] = rev_options[selection]
        else:
            # list of numbers
            input_data[feature] = st.selectbox(f"{feature}", options)
    else:
        # Numerical inputs: default values and ranges can be adjusted
        if feature in ['age', 'trestbps', 'chol', 'thalach']:
            val = st.number_input(f"{feature}", min_value=0, max_value=300, value=50)
        elif feature == 'oldpeak':
            val = st.number_input(f"{feature}", min_value=0.0, max_value=10.0, value=1.0, step=0.1)
        else:
            val = st.number_input(f"{feature}", min_value=0, max_value=10, value=0)
        input_data[feature] = val

# Convert input_data to DataFrame and reorder columns
input_df = pd.DataFrame([input_data])[expected_features]

if st.button("Predict"):
    try:
        prediction = model.predict(input_df)[0]
        proba = model.predict_proba(input_df)[0][1]

        if prediction == 1:
            st.error(f"⚠️ High risk of heart disease ({proba:.2%} probability)")
        else:
            st.success(f"✅ Low risk of heart disease ({proba:.2%} probability)")
    except Exception as e:
        st.error(f"Error during prediction: {e}")